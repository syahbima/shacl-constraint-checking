validForAllShape(?node) :- node(?node), ~invalidForAnyShape(?node) .

invalidForAnyShape(?node) :- node(?node), shape(?shape), ~valid(?shape,?node) .

valid(?shape, ?node) :- applicable(?shape,?node), holdConstraint(?node,?shape) .
valid(?shape, ?node) :- shape(?shape), node(?node), ~applicable(?node,?shape) .

instanceOf(?node,?class) :- data(?node, rdf:type, ?class) .
instanceOf(?node,?class) :- data(?node, rdf:type, ?anotherClass), subClassOf(?anotherClass, ?class) .
subClassOf(?classA,?classB) :- data(?classA, rdfs:subClassOf, ?classB) .
subClassOf(?classA,?classB) :- data(?classA, rdfs:subClassOf, ?classC), subClassOf(?classC,?classB) .


===================================================

validForAllShape() :- targetNode(?node), shape(?shape), valid(?shape, ?node)
validForAllShape() :- targetNode(?node), shape(?shape), ~applicable(?shape,?node)

==================================================
skenario :

-class subclass dari dirinya sendiri.
===================================================
applicable(?shape,?node) :- instanceOf(?node,?class)

node(?node) :- data(?node,?property,?anotherNode).
node(?node) :- data(?anotherNode,?property,?node).

==============
applicable(ex:shape3,?node) :- instanceOf(?node,ex:class)

=================
TODO :

targetobjectof
targetsubjectof
cara ngakses yang peroperty shape shape